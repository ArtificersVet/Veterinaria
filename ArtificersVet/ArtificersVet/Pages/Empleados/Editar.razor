@page "/Empleados/editar/{id:int}"
@using ArtificersVet.Models
@using ArtificersVet.Data
@using Microsoft.EntityFrameworkCore
@inject VeterinariaDbContext dbContext
@inject NavigationManager NavigationManager

<h3 class="text-center mt-4">Editar Empleado</h3>

    <style>
        
        body {
            background-color: #FFFACD;
        }

        .form-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr); /* Dos columnas para esta vista */
            gap: 20px;
            padding: 20px;
        }

        .btn-guardar {
            background-color: black;
            color: white;
        }

        .btn-cancelar {
            background-color: #FFD700; /* Amarillo fuerte */
            color: black;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }
    </style>

    <center><h3>Editar Empleado</h3></center>

    @if (empleado == null)
    {
        <p><em>Cargando...</em></p>
    }
    else
    {
        <EditForm Model="@empleado" OnValidSubmit="ActualizarEmpleado">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-container">
                <div class="form-group">
                    <label for="nombre">Nombre:</label>
                    <InputText id="nombre" @bind-Value="empleado.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => empleado.Nombre)" />
                </div>

                <div class="form-group">
                    <label for="apellido">Apellido:</label>
                    <InputText id="apellido" @bind-Value="empleado.Apellido" class="form-control" />
                    <ValidationMessage For="@(() => empleado.Apellido)" />
                </div>

                <div class="form-group">
                    <label for="email">Email:</label>
                    <InputText id="email" type="email" @bind-Value="empleado.Email" class="form-control" />
                    <ValidationMessage For="@(() => empleado.Email)" />
                </div>

                <div class="form-group">
                    <label for="telefono">Teléfono:</label>
                    <InputText id="telefono" @bind-Value="empleado.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => empleado.Telefono)" />
                </div>

                <div class="form-group">
                    <label for="direccion">Dirección:</label>
                    <InputText id="direccion" @bind-Value="empleado.Direccion" class="form-control" />
                    <ValidationMessage For="@(() => empleado.Direccion)" />
                </div>

                <div class="form-group">
                    <label for="puesto">Puesto:</label>
                    <InputText id="puesto" @bind-Value="empleado.Puesto" class="form-control" />
                    <ValidationMessage For="@(() => empleado.Puesto)" />
                </div>

                <div class="form-group">
                    <label for="salario">Salario:</label>
                    <InputNumber id="salario" @bind-Value="empleado.Salario" class="form-control" />
                    <ValidationMessage For="@(() => empleado.Salario)" />
                </div>

                <div class="form-group">
                    <label for="fechaContratacion">Fecha de Contratación:</label>
                    <InputDate id="fechaContratacion" @bind-Value="empleado.FechaContratacion" class="form-control" />
                    <ValidationMessage For="@(() => empleado.FechaContratacion)" />
                </div>
            </div>

            <div>
                <button type="submit" class="btn btn-primary btn-guardar">Guardar</button>
                <button type="button" class="btn btn-secondary btn-cancelar" @onclick="Cancelar">Cancelar</button>
            </div>
        </EditForm>
    }



@code {
    /// <summary>
    /// Declara un parámetro público id que se utiliza para recibir el identificador del empleado desde la URL o un componente padre
    /// private Empleado empleado, Declara una variable privada empleado que contendrá la información del empleado que se va a actualizar
    /// </summary>
    [Parameter]
    public int id { get; set; }
    private Empleado empleado;
    /// <summary>
    /// Sobrescribe el método  que se ejecuta cuando el componente se inicializa.
    /// Busca el empleado en la base de datos utilizando el id proporcionado y asigna el resultado a la variable.
    /// </summary>
    /// <returns>OnInitializedAsync</returns>
    protected override async Task OnInitializedAsync()
    {
        empleado = await dbContext.Empleados.FindAsync(id);
        if (empleado == null)
        {
            NavigationManager.NavigateTo("/Empleados/index");
        }
    }
    /// <summary>
    /// Declara un método asincrónico privado  que se utiliza para actualizar la información del empleado.
    /// </summary>
    /// <returns>private async Task ActualizarEmpleado()</returns>
    private async Task ActualizarEmpleado()
    {
        dbContext.Empleados.Update(empleado);
        await dbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/Empleados/index");
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/Empleados/index");
    }
}
