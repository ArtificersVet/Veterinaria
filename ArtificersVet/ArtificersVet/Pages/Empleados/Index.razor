@page "/Empleados/index"
@using ArtificersVet.Models
@using ArtificersVet.Data
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@inject VeterinariaDbContext dbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    /* General Styles */
    body {
        font-family: sans-serif;
        background-color: #f0e68c; 
    }

    .container {
        max-width: 100%; 
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    h3 {
        text-align: center;
        color: #333;
        margin-bottom: 20px;
    }

   
    

        .header-section button {
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            /* Botón "Crear nuevo empleado" */
            .header-section button:first-child { /* Selecciona el primer botón */
                background-color: #000; /* Negro */
                color: #fff; /* Blanco */
            }

            /* Botón "Buscar" */
            .header-section button:last-child { /* Selecciona el último botón */
                background-color: #f2b01e; /* Naranja */
                color: #fff; /* Blanco */
            }


    /* Table Styles */
    .table-container {
        overflow-x: auto; 
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background-color: #f2b01e; 
            color: white;
        }

        .table tr:nth-child(even) {
            background-color: #f2b01e;
                     border-radius: 20px;
        }


        .table button {
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }

        .table .btn-primary {
            background-color: blue; /* Blue button */
            color: white;
        }

        .table .btn-danger {
            background-color: #dc3545; /* Red button */
            color: white;
        }

    .pagination {
        display: flex;
        justify-content: center; /* Centra los elementos horizontalmente */
        align-items: center;
        margin-top: 20px;
        gap: 10px; /* Espacio entre los elementos */
    }

        .pagination button,
        .pagination select {
            background-color: #ffcc66; /* Color naranja suave */
            color: black;
            padding: 8px 12px; /* Aumenta un poco el padding */
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .pagination span {
            font-weight: bold;
        }

        /* Hover effect para botones */
        .pagination button:hover {
            background-color: #e6b800; /* Naranja más oscuro al pasar el mouse */
        }


</style>

<div class="container mt-4">
    <h3 class="mb-4">Gestión de Empleados</h3>

    @if (empleados == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (!empleadosFiltrados.Any())
    {
        <div class="alert alert-warning" role="alert">
            No hay empleados disponibles.
        </div>
    }
    else
    {
        <div class="mb-3 d-flex justify-content-between align-items-center">
            <button class="btn btn-success" style="background-color:black" @onclick="AddEmpleado">Nuevo Empleado</button>
            <div class="d-flex align-items-center">
                <div class="input-group me-2">
                    <input id="nombre" class="form-control form-control-sm" placeholder="Nombre" value="@searchNombre" @oninput="e => searchNombre = e.Value.ToString()" />
                </div>
                <div class="input-group me-2">
                    <input id="apellido" class="form-control form-control-sm" placeholder="Apellido" value="@searchApellido" @oninput="e => searchApellido = e.Value.ToString()" />
                </div>
                <button class="btn btn-primary btn-sm" style="background-color:orang" @onclick="BuscarEmpleados">Buscar</button>
                <button class="btn btn-secondary btn-sm ms-2" @onclick="LimpiarBusqueda">Limpiar</button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Nombre</th>
                        <th>Apellido</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Dirección</th>
                        <th>Puesto</th>
                        <th>Salario</th>
                        <th>Fecha de Contratación</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var empleado in empleadosPaginaActual)
                    {
                        <tr>
                            <td>@empleado.Nombre</td>
                            <td>@empleado.Apellido</td>
                            <td>@empleado.Email</td>
                            <td>@empleado.Telefono</td>
                            <td>@empleado.Direccion</td>
                            <td>@empleado.Puesto</td>
                            <td>@empleado.Salario</td>
                            <td>@empleado.FechaContratacion?.ToString("dd/MM/yyyy")</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => EditEmpleado(empleado.Id)">Editar</button>
                                <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteEmpleado(empleado.Id)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-3 ">
            <div class="pagination">
            <div>
                <button class="btn btn-secondary btn-sm" @onclick="PreviousPage" disabled="@(paginaActual == 1)">Anterior</button>
                <span class="mx-2">Página @paginaActual de @totalPaginas</span>
                <button class="btn btn-secondary btn-sm" @onclick="NextPage" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
            </div>
            <div>
                <label for="itemsPerPage" class="form-label">Items por Página:</label>
                <select id="itemsPerPage" class="form-select form-select-sm" @onchange="OnItemsPerPageChange">
                    <option value="5">5</option>
                    <option value="10">10</option>
                    <option value="15">15</option>
                </select>
            </div>
            </div>
        </div>
    }
</div>

@code {
    /// <summary>
    /// Declara una lista privada que contiene todos los empleados.(private List<Empleado> empleados;)
    ///  Declara una lista privada que contiene los empleados filtrados según los criterios de búsqueda.( private List<Empleado> empleadosFiltrados;)
    ///  Declara una variable privada para almacenar el nombre de búsqueda.(private string searchNombre = string.Empty;)
    ///  Declara una variable privada para almacenar el apellido de búsqueda.(private string searchApellido = string.Empty;)
    /// </summary>

    private List<Empleado> empleados;
    private List<Empleado> empleadosFiltrados;
    private List<Empleado> empleadosPaginaActual;
    private string searchNombre = string.Empty;
    private string searchApellido = string.Empty;
    /// <summary>
    /// Variables de paginación
    /// </summary>
    private int paginaActual = 1;
    private int itemsPorPagina = 10;
    private int totalPaginas => (int)Math.Ceiling((double)empleadosFiltrados.Count / itemsPorPagina);
    /// <summary>
    /// Sobrescribe el método OnInitializedAsync que se ejecuta cuando el componente se inicializa.
    ///  // Inicializa la lista de empleados desde la base de datos.
    /// </summary>
    /// <returns></returns>

    protected override async Task OnInitializedAsync()
    {
        empleados = await dbContext.Empleados.ToListAsync();
        empleadosFiltrados = empleados;
        ActualizarPagina();
    }
    /// <summary>
    /// Navega a la página de creación de empleados.
    /// </summary>

    private void AddEmpleado()
    {
        NavigationManager.NavigateTo("/Empleados/crear");
    }
    /// <summary>
    ///  Navega a la página de edición de un empleado específico.
    /// </summary>
    /// <param name="id"></param>

    private void EditEmpleado(int id)
    {
        NavigationManager.NavigateTo($"/Empleados/editar/{id}");
    }
    /// <summary>
    /// Elimina un empleado de la base de datos y actualiza la lista de empleados.
    /// </summary>
    /// <param name="empleadoId"></param>
    /// <returns></returns>

    private async Task DeleteEmpleado(int empleadoId)
    {
        var empleado = await dbContext.Empleados.FindAsync(empleadoId);
        if (empleado != null)
        {
            var result = await JSRuntime.InvokeAsync<object>("Swal.fire", new
            {
                title = "¿Estás seguro?",
                text = $"¿Estás seguro de que quieres eliminar a {empleado.Nombre} {empleado.Apellido}?",
                icon = "warning",
                showCancelButton = true,
                confirmButtonColor = "#dc3545",
                confirmButtonText = "Sí, eliminar",
                cancelButtonText = "Cancelar"
            });

            if (result is JsonElement jsonResult && jsonResult.TryGetProperty("isConfirmed", out var isConfirmed))
            {
                if (isConfirmed.GetBoolean())
                {
                    var consultas = await dbContext.Consultas.Where(c => c.EmpleadoId == empleadoId).ToListAsync();
                    dbContext.Consultas.RemoveRange(consultas);
                    dbContext.Empleados.Remove(empleado);
                    await dbContext.SaveChangesAsync();
                    empleados.Remove(empleado);
                    ActualizarPagina();
                }
            }
        }
    }
    /// <summary>
    /// Filtra la lista de empleados según los criterios de búsqueda de nombre y apellido.
    /// </summary>
    ///  private void BuscarEmpleados()
    private void BuscarEmpleados()
    {
    empleadosFiltrados = empleados.Where(e =>
        (string.IsNullOrEmpty(searchNombre) || e.Nombre.Equals(searchNombre, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrEmpty(searchApellido) || e.Apellido.Equals(searchApellido, StringComparison.OrdinalIgnoreCase))
    ).ToList();
    paginaActual = 1; // Reset to the first page
    ActualizarPagina();
    }
    /// <summary>
    /// Limpia los criterios de búsqueda y restaura la lista completa de empleados.
    /// </summary>
    private void LimpiarBusqueda()
    {
        searchNombre = string.Empty;
        searchApellido = string.Empty;
        empleadosFiltrados = empleados;
        paginaActual = 1; // Reset to the first page
        ActualizarPagina();
    }

    /// <summary>
    /// Actualiza la lista de empleados mostrados en la página actual
    /// </summary>
    private void ActualizarPagina()
    {
        empleadosPaginaActual = empleadosFiltrados
            .Skip((paginaActual - 1) * itemsPorPagina)
            .Take(itemsPorPagina)
            .ToList();
    }
    /// <summary>
    /// Cambia a la página anterior si es posible
    /// </summary>
    private void PreviousPage()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            ActualizarPagina();
        }
    }
    /// <summary>
    /// Cambia a la página siguiente si es posible
    /// </summary>
    private void NextPage()
    {
        if (paginaActual < totalPaginas)
        {
            paginaActual++;
            ActualizarPagina();
        }
    }
    /// <summary>
    ///  Calcula los empleados a mostrar en la página actual y permite actualizar la página y el número de ítems por página.
    ///  Cambia el número de ítems por página y reinicia la página a la primera
    /// </summary>
    /// <param name="e"></param>
    private void OnItemsPerPageChange(ChangeEventArgs e)
    {
        itemsPorPagina = int.Parse(e.Value.ToString());
        paginaActual = 1; // Reset to the first page
        ActualizarPagina();
    }
}
