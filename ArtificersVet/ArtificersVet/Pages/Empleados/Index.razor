@page "/Empleados/index"
@using ArtificersVet.Models
@using ArtificersVet.Data
@using Microsoft.EntityFrameworkCore
@inject VeterinariaDbContext dbContext
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h3 class="mb-4">Gestión de Empleados</h3>

    @if (empleados == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (!empleadosFiltrados.Any())
    {
        <div class="alert alert-warning" role="alert">
            No hay empleados disponibles.
        </div>
    }
    else
    {
        <div class="mb-3">
            <button class="btn btn-success" @onclick="AddEmpleado">Nuevo Empleado</button>
        </div>

        <div class="row mb-3">
            <div class="col-auto">
                <label for="nombre">Nombre</label>
                <input id="nombre" class="form-control form-control-sm" @bind="searchNombre" style="width: 150px;" />
            </div>
            <div class="col-auto">
                <label for="apellido">Apellido</label>
                <input id="apellido" class="form-control form-control-sm" @bind="searchApellido" style="width: 150px;" />
            </div>
            <div class="col-auto align-self-end">
                <button class="btn btn-primary btn-sm" @onclick="BuscarEmpleados">Buscar</button>
                <button class="btn btn-secondary btn-sm ms-2" @onclick="LimpiarBusqueda">Limpiar</button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Nombre</th>
                        <th>Apellido</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Dirección</th>
                        <th>Puesto</th>
                        <th>Salario</th>
                        <th>Fecha de Contratación</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var empleado in empleadosFiltrados)
                    {
                        <tr>
                            <td>@empleado.Nombre</td>
                            <td>@empleado.Apellido</td>
                            <td>@empleado.Email</td>
                            <td>@empleado.Telefono</td>
                            <td>@empleado.Direccion</td>
                            <td>@empleado.Puesto</td>
                            <td>@empleado.Salario</td>
                            <td>@empleado.FechaContratacion?.ToString("dd/MM/yyyy")</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="() => EditEmpleado(empleado.Id)">Editar</button>
                                <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteEmpleado(empleado.Id)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Empleado> empleados;
    private List<Empleado> empleadosFiltrados;
    private string searchNombre = string.Empty;
    private string searchApellido = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        empleados = await dbContext.Empleados.ToListAsync();
        empleadosFiltrados = empleados;
    }

    private void AddEmpleado()
    {
        NavigationManager.NavigateTo("/Empleados/crear");
    }

    private void EditEmpleado(int id)
    {
        NavigationManager.NavigateTo($"/Empleados/editar/{id}");
    }

    private async Task DeleteEmpleado(int empleadoId)
    {
        var empleado = await dbContext.Empleados.FindAsync(empleadoId);
        if (empleado != null)
        {
            dbContext.Empleados.Remove(empleado);
            await dbContext.SaveChangesAsync();
            empleados = await dbContext.Empleados.ToListAsync();
            empleadosFiltrados = empleados;
        }
    }

    private void BuscarEmpleados()
    {
        empleadosFiltrados = empleados.Where(e =>
            (string.IsNullOrEmpty(searchNombre) || e.Nombre.Equals(searchNombre, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(searchApellido) || e.Apellido.Equals(searchApellido, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    }

    private void LimpiarBusqueda()
    {
        searchNombre = string.Empty;
        searchApellido = string.Empty;
        empleadosFiltrados = empleados;
    }
}
