@page "/Empleados/crear"
@using ArtificersVet.Models
@using ArtificersVet.Data
@using Microsoft.EntityFrameworkCore
@inject VeterinariaDbContext dbContext
@inject NavigationManager NavigationManager

<style>
    
    body {
        background-color: #FFFACD;

    }

    .form-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        padding: 20px;
    }

    .btn-guardar {
        background-color: black;
        color: white;
    }

    .btn-cancelar {
        background-color: #FFD700; /* Amarillo fuerte */
        color: black;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }
</style>

<center><h3>Crear Empleado</h3></center>

<EditForm Model="@nuevoEmpleado" OnValidSubmit="CrearEmpleado">
    <DataAnnotationsValidator />

    <div class="form-container">
        <div class="form-group">
            <label for="nombre">Nombre:</label>
            <InputText id="nombre" @bind-Value="nuevoEmpleado.Nombre" class="form-control" />
            <ValidationMessage For="@(() => nuevoEmpleado.Nombre)" />
        </div>

        <div class="form-group">
            <label for="apellido">Apellido:</label>
            <InputText id="apellido" @bind-Value="nuevoEmpleado.Apellido" class="form-control" />
            <ValidationMessage For="@(() => nuevoEmpleado.Apellido)" />
        </div>

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" type="email" @bind-Value="nuevoEmpleado.Email" class="form-control" />
            <ValidationMessage For="@(() => nuevoEmpleado.Email)" />
        </div>

        <div class="form-group">
            <label for="telefono">Teléfono:</label>
            <InputText id="telefono" @bind-Value="nuevoEmpleado.Telefono" class="form-control" />
            <ValidationMessage For="@(() => nuevoEmpleado.Telefono)" />
        </div>

        <div class="form-group">
            <label for="direccion">Dirección:</label>
            <InputText id="direccion" @bind-Value="nuevoEmpleado.Direccion" class="form-control" />
            <ValidationMessage For="@(() => nuevoEmpleado.Direccion)" />
        </div>

        <div class="form-group">
            <label for="puesto">Puesto:</label>
            <InputText id="puesto" @bind-Value="nuevoEmpleado.Puesto" class="form-control" />
            <ValidationMessage For="@(() => nuevoEmpleado.Puesto)" />
        </div>

        <div class="form-group">
            <label for="salario">Salario:</label>
            <InputNumber id="salario" @bind-Value="nuevoEmpleado.Salario" class="form-control" />
            <ValidationMessage For="@(() => nuevoEmpleado.Salario)" />
        </div>

        <div class="form-group">
            <label for="fechaContratacion">Fecha de Contratación:</label>
            <InputDate id="fechaContratacion" @bind-Value="nuevoEmpleado.FechaContratacion" class="form-control" />
            <ValidationMessage For="@(() => nuevoEmpleado.FechaContratacion)" />
        </div>
    </div>

    <div>
        <button type="submit" class="btn btn-primary btn-guardar">Guardar</button>
        <button type="button" class="btn btn-secondary btn-cancelar" @onclick="Cancelar">Cancelar</button>
    </div>
</EditForm>

@code {
    private Empleado nuevoEmpleado = new Empleado();

    private async Task CrearEmpleado()
    {
        dbContext.Empleados.Add(nuevoEmpleado);
        await dbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/Empleados/index");
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/Empleados/index");
    }
}
