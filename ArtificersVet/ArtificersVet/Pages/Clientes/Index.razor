@page "/Clientes/index"
@using ArtificersVet.Models
@using ArtificersVet.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject VeterinariaDbContext dbContext
@inject IJSRuntime JSRuntime

<div class="container">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Trirong">
    <div class="content">
        <h3>Clientes</h3>

        <EditForm Model="@this" OnValidSubmit="BuscarClientesPorNombre">
            <div class="actions">
                <div class="input-group">
                    <label for="nombreBusqueda">Nombre del Cliente: </label>
                    <InputText id="nombreBusqueda" @bind-Value="nombreBusqueda" class="form-control" />
                    <button class="btn-search" type="submit">Buscar</button>
                </div>
            </div>
        </EditForm>

        @if (clientes == null)
        {
            <p><em>Cargando...</em></p>
        }
        else
        {
            <h3>Listado de Clientes</h3>
            <button class="btn-create" @onclick="AddCliente">Nuevo Cliente</button>
            <table class="clientes-table">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Apellido</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Dirección</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cliente in clientes)
                    {
                        <tr>
                            <td>@cliente.Nombre</td>
                            <td>@cliente.Apellido</td>
                            <td>@cliente.Email</td>
                            <td>@cliente.Telefono</td>
                            <td>@cliente.Direccion</td>
                            <td>
                                <button class="btn-edit" @onclick="() => EditCliente(cliente.Id)">Modificar</button>
                                <button class="btn-delete" @onclick="() => DeleteCliente(cliente.Id)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <br />
            <div class="pagination">
                <button @onclick="PrevPage" disabled="@(!prevPageEnabled)">Anterior</button>
                <span>Página @actualPage de @totalPages</span>
                <button @onclick="NextPage" disabled="@(!nextPageEnabled)">Siguiente</button>
            </div>
            <br />
        }
    </div>
</div>
<style>
    .container {
        background-color: #FFFACD;
        padding: 20px;
        border-radius: 10px;
        font-family: Arial, sans-serif;
    }

    .navbar {
        background-color: #ffdd99;
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    .content h3 {
        font-family: "Trirong", serif;
        text-align: center;
    }

    .actions {
        justify-content: end;
        text-align: center;
        margin-bottom: 20px;
    }

    .input-group {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 5px; /* Espacio entre los elementos del input-group */
    }

    #nombreBusqueda {
        width: 200px;
    }

    .btn-search {
        background-color: #ffcc66;
        color: black;
        padding: 10px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
    }

    .clientes-table {
        width: 100%;
        border-collapse: collapse;
        text-align: left;
    }

        .clientes-table th,
        .clientes-table td {
            padding: 10px;
            border: 1px solid #ddd;
        }

        .clientes-table th {
            background-color: #ffcc66;
        }

    .btn-create {
        background-color: black;
        color: white;
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-bottom: 6px;
    }

    .btn-edit {
        background-color: blue;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }


    .btn-delete {
        background-color: red;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
</style>


@code {
    private List<Cliente1> clientes;
    private string nombreBusqueda = null;

    /// <summary>
    /// se inicializan las propiedades de paginacion.
    /// </summary>
    private int actualPage = 1;

    private int pageCantidadRegistros = 15; //cantidad de registro x pagina.
    private int totalPages = 1; //Número total de páginas calculado con base en el total de clientes.
    private bool prevPageEnabled => actualPage > 1; //indica si el botón para la página anterior está habilitado
    private bool nextPageEnabled => actualPage < totalPages; //indica si el botón para la siguiente página está habilitado.

    /// <summary>
    /// Carga inicial de los clientes al abrir la página.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await cargarClientes();
    }

    /// <summary>
    /// Carga la lista de clientes desde la base de datos con la paginación aplicada.
    /// </summary>
    private async Task cargarClientes()
    {
        var query = dbContext.Clientes1.AsQueryable();

        if (!string.IsNullOrEmpty(nombreBusqueda))
        {
            query = query.Where(c => c.Nombre.Contains(nombreBusqueda));
        }

        var totalItems = await query.CountAsync();
        totalPages = (int)Math.Ceiling(totalItems / (double)pageCantidadRegistros);

        clientes = await query
            .Skip((actualPage - 1) * pageCantidadRegistros)
            .Take(pageCantidadRegistros)
            .ToListAsync();
    }

    /// <summary>
    /// Busca clientes por nombre y actualiza la lista de clientes.
    /// </summary>
    private async Task BuscarClientesPorNombre()
    {
        actualPage = 1;
        await cargarClientes();
    }

    /// <summary>
    /// Navega a la página de creación de un nuevo cliente.
    /// </summary>
    private void AddCliente()
    {
        NavigationManager.NavigateTo("/clientes/create");
    }

    /// <summary>
    /// Navega a la página de edición del cliente especificado.
    /// </summary>
    /// <param name="id">ID del cliente a editar.</param>
    private void EditCliente(int id)
    {
        NavigationManager.NavigateTo($"/clientes/edit/{id}");
    }

    /// <summary>
    /// Elimina el cliente especificado tras confirmar la acción.
    /// </summary>
    /// <param name="id">ID del cliente a eliminar.</param>
    private async Task DeleteCliente(int id)
    {
        var cliente = await dbContext.Clientes1.FindAsync(id);
        if (cliente != null && await JSRuntime.InvokeAsync<bool>("confirm", new object?[] { $"¿Estás seguro de eliminar el cliente {cliente.Nombre}?" }))
        {
            dbContext.Clientes1.Remove(cliente);
            await dbContext.SaveChangesAsync();
            await cargarClientes();
        }
    }

    /// <summary>
    /// Navega a la página anterior de la lista de clientes.
    /// </summary>
    private async Task PrevPage()
    {
        if (actualPage > 1)
        {
            actualPage--;
            await cargarClientes();
        }
    }

    /// <summary>
    /// Navega a la siguiente página de la lista de clientes.
    /// </summary>
    private async Task NextPage()
    {
        if (actualPage < totalPages)
        {
            actualPage++;
            await cargarClientes();
        }
    }
}
